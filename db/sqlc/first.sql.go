// Code generated by sqlc. DO NOT EDIT.
// source: first.sql

package db

import (
	"context"
)

const addfirstProductPrice = `-- name: AddfirstProductPrice :one
UPDATE first
SET price = price + $1
WHERE id = $2
RETURNING id, brand, link, price, created_at
`

type AddfirstProductPriceParams struct {
	Price string `json:"price"`
	ID    int64  `json:"id"`
}

func (q *Queries) AddfirstProductPrice(ctx context.Context, arg AddfirstProductPriceParams) (First, error) {
	row := q.db.QueryRowContext(ctx, addfirstProductPrice, arg.Price, arg.ID)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const createFirstProduct = `-- name: CreateFirstProduct :one
INSERT INTO first (
  brand,
  link,
  price
) VALUES (
  $1, $2, $3
) RETURNING id, brand, link, price, created_at
`

type CreateFirstProductParams struct {
	Brand string `json:"brand"`
	Link  string `json:"link"`
	Price string `json:"price"`
}

func (q *Queries) CreateFirstProduct(ctx context.Context, arg CreateFirstProductParams) (First, error) {
	row := q.db.QueryRowContext(ctx, createFirstProduct, arg.Brand, arg.Link, arg.Price)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFirstProduct = `-- name: DeleteFirstProduct :exec
DELETE FROM first
WHERE id = $1
`

func (q *Queries) DeleteFirstProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFirstProduct, id)
	return err
}

const getFirstProduct = `-- name: GetFirstProduct :one
SELECT id, brand, link, price, created_at FROM first
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFirstProduct(ctx context.Context, id int64) (First, error) {
	row := q.db.QueryRowContext(ctx, getFirstProduct, id)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getFirstProductForUpdate = `-- name: GetFirstProductForUpdate :one
SELECT id, brand, link, price, created_at FROM first
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetFirstProductForUpdate(ctx context.Context, id int64) (First, error) {
	row := q.db.QueryRowContext(ctx, getFirstProductForUpdate, id)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getLengthOfFirst = `-- name: GetLengthOfFirst :one
SELECT count(id) 
FROM first
`

func (q *Queries) GetLengthOfFirst(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLengthOfFirst)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listFirstProduct = `-- name: ListFirstProduct :many
SELECT id, brand, link, price, created_at FROM first
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListFirstProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFirstProduct(ctx context.Context, arg ListFirstProductParams) ([]First, error) {
	rows, err := q.db.QueryContext(ctx, listFirstProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []First{}
	for rows.Next() {
		var i First
		if err := rows.Scan(
			&i.ID,
			&i.Brand,
			&i.Link,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFirstProduct = `-- name: UpdateFirstProduct :one
UPDATE first
SET price = $2
WHERE id = $1
RETURNING id, brand, link, price, created_at
`

type UpdateFirstProductParams struct {
	ID    int64  `json:"id"`
	Price string `json:"price"`
}

func (q *Queries) UpdateFirstProduct(ctx context.Context, arg UpdateFirstProductParams) (First, error) {
	row := q.db.QueryRowContext(ctx, updateFirstProduct, arg.ID, arg.Price)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
