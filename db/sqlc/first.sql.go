// Code generated by sqlc. DO NOT EDIT.
// source: first.sql

package db

import (
	"context"
)

const addfirstBalance = `-- name: AddfirstBalance :one
UPDATE first
SET price = price + $1
WHERE id = $2
RETURNING id, link, price, created_at
`

type AddfirstBalanceParams struct {
	Price int64 `json:"price"`
	ID    int64 `json:"id"`
}

func (q *Queries) AddfirstBalance(ctx context.Context, arg AddfirstBalanceParams) (First, error) {
	row := q.db.QueryRowContext(ctx, addfirstBalance, arg.Price, arg.ID)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const createFirst = `-- name: CreateFirst :one
INSERT INTO first (
  link,
  price
) VALUES (
  $1, $2
) RETURNING id, link, price, created_at
`

type CreateFirstParams struct {
	Link  string `json:"link"`
	Price int64  `json:"price"`
}

func (q *Queries) CreateFirst(ctx context.Context, arg CreateFirstParams) (First, error) {
	row := q.db.QueryRowContext(ctx, createFirst, arg.Link, arg.Price)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFirst = `-- name: DeleteFirst :exec
DELETE FROM first
WHERE id = $1
`

func (q *Queries) DeleteFirst(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFirst, id)
	return err
}

const getFirst = `-- name: GetFirst :one
SELECT id, link, price, created_at FROM first
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFirst(ctx context.Context, id int64) (First, error) {
	row := q.db.QueryRowContext(ctx, getFirst, id)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getFirstForUpdate = `-- name: GetFirstForUpdate :one
SELECT id, link, price, created_at FROM first
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetFirstForUpdate(ctx context.Context, id int64) (First, error) {
	row := q.db.QueryRowContext(ctx, getFirstForUpdate, id)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const listFirst = `-- name: ListFirst :many
SELECT id, link, price, created_at FROM first
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListFirstParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFirst(ctx context.Context, arg ListFirstParams) ([]First, error) {
	rows, err := q.db.QueryContext(ctx, listFirst, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []First{}
	for rows.Next() {
		var i First
		if err := rows.Scan(
			&i.ID,
			&i.Link,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFirst = `-- name: UpdateFirst :one
UPDATE first
SET price = $2
WHERE id = $1
RETURNING id, link, price, created_at
`

type UpdateFirstParams struct {
	ID    int64 `json:"id"`
	Price int64 `json:"price"`
}

func (q *Queries) UpdateFirst(ctx context.Context, arg UpdateFirstParams) (First, error) {
	row := q.db.QueryRowContext(ctx, updateFirst, arg.ID, arg.Price)
	var i First
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
