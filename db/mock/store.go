// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amirrmonfared/DiscountFinder/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	db "github.com/amirrmonfared/DiscountFinder/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateOnSale mocks base method.
func (m *MockStore) CreateOnSale(arg0 context.Context, arg1 db.CreateOnSaleParams) (db.OnSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOnSale", arg0, arg1)
	ret0, _ := ret[0].(db.OnSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOnSale indicates an expected call of CreateOnSale.
func (mr *MockStoreMockRecorder) CreateOnSale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOnSale", reflect.TypeOf((*MockStore)(nil).CreateOnSale), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// DeleteOnSale mocks base method.
func (m *MockStore) DeleteOnSale(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOnSale", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOnSale indicates an expected call of DeleteOnSale.
func (mr *MockStoreMockRecorder) DeleteOnSale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOnSale", reflect.TypeOf((*MockStore)(nil).DeleteOnSale), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// GetLengthOfProducts mocks base method.
func (m *MockStore) GetLengthOfProducts(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLengthOfProducts", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLengthOfProducts indicates an expected call of GetLengthOfProducts.
func (mr *MockStoreMockRecorder) GetLengthOfProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLengthOfProducts", reflect.TypeOf((*MockStore)(nil).GetLengthOfProducts), arg0)
}

// GetLengthOnSale mocks base method.
func (m *MockStore) GetLengthOnSale(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLengthOnSale", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLengthOnSale indicates an expected call of GetLengthOnSale.
func (mr *MockStoreMockRecorder) GetLengthOnSale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLengthOnSale", reflect.TypeOf((*MockStore)(nil).GetLengthOnSale), arg0)
}

// GetOnSale mocks base method.
func (m *MockStore) GetOnSale(arg0 context.Context, arg1 int64) (db.OnSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnSale", arg0, arg1)
	ret0, _ := ret[0].(db.OnSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnSale indicates an expected call of GetOnSale.
func (mr *MockStoreMockRecorder) GetOnSale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnSale", reflect.TypeOf((*MockStore)(nil).GetOnSale), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// ListOnSale mocks base method.
func (m *MockStore) ListOnSale(arg0 context.Context, arg1 db.ListOnSaleParams) ([]db.OnSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOnSale", arg0, arg1)
	ret0, _ := ret[0].([]db.OnSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOnSale indicates an expected call of ListOnSale.
func (mr *MockStoreMockRecorder) ListOnSale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOnSale", reflect.TypeOf((*MockStore)(nil).ListOnSale), arg0, arg1)
}

// ListProduct mocks base method.
func (m *MockStore) ListProduct(arg0 context.Context, arg1 db.ListProductParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProduct", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProduct indicates an expected call of ListProduct.
func (mr *MockStoreMockRecorder) ListProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProduct", reflect.TypeOf((*MockStore)(nil).ListProduct), arg0, arg1)
}

// StoreOnSale mocks base method.
func (m *MockStore) StoreOnSale(arg0 context.Context, arg1 db.CreateOnSaleParams) (db.CreateOnSaleResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOnSale", arg0, arg1)
	ret0, _ := ret[0].(db.CreateOnSaleResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreOnSale indicates an expected call of StoreOnSale.
func (mr *MockStoreMockRecorder) StoreOnSale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOnSale", reflect.TypeOf((*MockStore)(nil).StoreOnSale), arg0, arg1)
}

// StoreProduct mocks base method.
func (m *MockStore) StoreProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.CreateProductResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreProduct", arg0, arg1)
	ret0, _ := ret[0].(db.CreateProductResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreProduct indicates an expected call of StoreProduct.
func (mr *MockStoreMockRecorder) StoreProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProduct", reflect.TypeOf((*MockStore)(nil).StoreProduct), arg0, arg1)
}

// UpdateOnSale mocks base method.
func (m *MockStore) UpdateOnSale(arg0 context.Context, arg1 db.UpdateOnSaleParams) (db.OnSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOnSale", arg0, arg1)
	ret0, _ := ret[0].(db.OnSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOnSale indicates an expected call of UpdateOnSale.
func (mr *MockStoreMockRecorder) UpdateOnSale(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOnSale", reflect.TypeOf((*MockStore)(nil).UpdateOnSale), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}
